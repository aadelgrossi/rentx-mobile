# This is sample SDL schema for GraphQL Faker.
#
# There are two directives you can use to enhance fake data:
#   - @fake
#   - @examples
# Each directive has autocompletion working so start by typing @
#
# Press save or Cmd+Enter to apply the changes and update server. Switch to GraphiQL
# on the left panel to immediately test your changes.
# This tool also supports extending existing APIs. Check graphql-faker --help
#
# Developed with ❤️ by APIs.guru | https://github.com/APIs-guru/graphql-faker

type ProfilePicture {
  id: ID
  url: String! @examples(values: [
    "https://randomuser.me/api/portraits/men/41.jpg",
    "https://randomuser.me/api/portraits/men/11.jpg", 
    "https://randomuser.me/api/portraits/women/68.jpg",
    "https://randomuser.me/api/portraits/women/29.jpg"])
}

type CarPhoto {
  id: ID
  url: String! @examples(values: [
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177832/rentx/audi-suv_d5qhpk.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177829/rentx/audi-yellow_aqz2da.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177828/rentx/mercedes-2_wtnos1.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177824/rentx/porsche_blcjbc.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177822/rentx/bmw2_ommbp7.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177822/rentx/mercedes_aqwupk.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177821/rentx/maserati_qqg7kj.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177819/rentx/bugatti_p0ta3z.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177813/rentx/corvette_nfugdn.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177810/rentx/lamborghini_t3volw.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177807/rentx/bmw_gohyhq.png",
    "https://res.cloudinary.com/andre-grossi/image/upload/v1606177804/rentx/audi-black_uqv0ap.png"
  ])
}

type CarManufacturer {
  id: ID,
  name: String! @examples(values: ["Porsche", "BMW", "Bugatti", "Audi","Maserati","Lamborghini","Volvo","Aston Martin", "Chevrolet"])
}

enum SPECIFICATION {
	speed,
	acceleration,
	hp,
	person
}

enum TRANSMISSION{
  auto,
  manual
}

enum FUEL_TYPE{
  gas,
  electric,
  hybrid
}

type CustomCarSpec {
  id: ID!
  name: SPECIFICATION!
  value: String! @fake(type: lorem, options: { loremSize: word})
}


type Car {
  id: ID!
  name: String! @examples(values: ["Panamera", "TT", "Huracan", "Lancer Evo X", "Corvette Z06",])
  year: Int!
  manufacturer: CarManufacturer!
  photo: CarPhoto!
  fuelType: FUEL_TYPE!
  transmission: TRANSMISSION!
  dailyValue: Int! @fake(type: number, options: {minNumber: 150, maxNumber: 3400})
  specifications: [CustomCarSpec!] @listLength(min:3, max:4)
}

type User {
  id: ID
  name: String! @fake(type: fullName)
  email: String! @fake(type: email)
  admin: Boolean! @examples(values: [false])
  avatar: ProfilePicture!
  createdAt: String! @fake(type: pastDate)
}

type Rental {
  id: ID
  car: Car!
  user: User!
  startDate: String! @fake(type: date, options: {dateFrom: "2020-11-25T10:34:25Z", dateTo: "2020-12-02T10:34:25Z"})
  endDate: String! @fake(type: date, options: { dateFrom: "2020-12-06T10:34:25Z", dateTo: "2020-12-10T10:34:25Z"})
}

input SignInInput {
  email: String!
  password: String!
}

input FilterOptions {
  startDate: String
  endDate: String
  fuelType: String
  transmission: String
  minPrice: Int
  maxPrice: Int
  
}

input CreateReservation {
  startDate: String
  endDate: String
  carId: String
  userId: String
}

type Auth {
  accessToken: String! @fake(type: uuid)
  refreshToken: String! @fake(type: uuid)
  user: User!
}

type Query {
  me: User!
  cars(data: FilterOptions): [Car!] @listLength(min:5, max:9)
  car: Car!
  rentals: [Rental!] @listLength(min:2, max:5)
}

type Mutation {
  signIn(data: SignInInput): Auth!
  createReservation(data: CreateReservation!): Rental!
}
